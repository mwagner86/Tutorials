A target pattern is composed of a "%" between a prefix and a suffix,
either or both of which may be empty. 
The pattern matches a file name only if the file name starts with the prefix and ends
with the suffix, without overlap. The text between the prefix and the suffix is called the stem.
Thus, when the pattern "%.o" matches the file name test.o, the stem is "test". 
The pattern rule prerequisites are turned into actual file names by substituting
the stem for the character "%". Thus,
if in the same example one of the prerequisites is written as "%.c", it expands to "test.c".

CFLAGS
Extra flags to give to the C compiler.

LDFLAGS
Extra flags to give to compilers when they are supposed to invoke the linker,
‘ld’, such as -L. Libraries (-lfoo) should be added to the LDLIBS variable instead.

LDLIBS
Library flags or names given to compilers when they are supposed to invoke the linker,
‘ld’. LOADLIBES is a deprecated (but still supported) alternative to LDLIBS. Non-library linker flags, such as -L, should go in the LDFLAGS variable.

CC
Program for compiling C programs; default "cc".

https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html

https://www.gnu.org/software/make/manual/make.html#Flavors

Explanation between "=" and ":="


# Compile the program in debug mode (-g), and don't stop compiling on
# warnings.
	CFLAGS="-Wall -Wextra -g" make

# Compile object files in the obj folder from source files in the src
# folder.
obj/%.o: src/%.c
	$(CC) -c $(CFLAGS) -o $@ $^

# Note that make has no knowledge of directories here.
All it does is look for “obj/” at the start and “.o” at the end,
and replaces those with “src/” at the start and “.c” at the end.
Because the "$@" and "$^" automatic variables resolve to the processed forms,
something like this will be executed:
	cc -c -Wall -Wextra -Werror -o obj/example.o src/example.c

This won’t quite work however,
as the compiler won’t create an obj folder if it doesn’t already exist.
We can address this by running "mkdir -p" before cc,
which creates a directory if it does not already exist.
To figure out which directory to create, one can use the $(dir ...) function.
https://www.gnu.org/software/make/manual/make.html#File-Name-Functions

obj/%.o: src/%.c
	@mkdir -p $(dir $@)
	$(CC) -c $(CFLAGS) -o $@ $^

he @ at the start of the makedir function is just a little aesthetic choice.
It makes it so that all these mkdir calls won’t be printed.
The output can be quite cluttered otherwise.

Now to make this all work,
we just need to make sure that anywhere we use an object file as a prerequisite
we reference them with their obj/ prefix,
otherwise make won’t be able to find them.

	"OBJFILES := obj/main.o obj/greeter.o"

You can avoid writing the obj/ prefix every time using:
https://www.gnu.org/software/make/manual/make.html#Substitution-Refs

clean:
	rm -f $(NAME) $(OBJFILES)

.PHONY: clean
https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html


NAME := foo
OBJFILES := obj/main.o obj/greeter.o
LDFLAGS ?=
CFLAGS ?= -Wall -Wextra -Werror

$(NAME): $(OBJFILES)
	$(CC) $(LDFLAGS) -o $@ $^

obj/%.o: src/%.c
	@mkdir -p $(dir $@)
	$(CC) -c $(CFLAGS) -o $@ $^

clean:
	rm -f $(NAME) $(OBJFILES)

.PHONY: clean

There are two more things which are nice to have in our Makefile.
First of, right now recompiling our project using make won’t quite work
if you modified a header file, as make is unaware of those.

This easiest way is to tell make that every object file also depends on every header file.
That would look like this:

NAME := foo
HEADERFILES := src/greeter.h
OBJFILES := obj/main.o obj/greeter.o
LDFLAGS ?=
CFLAGS ?= -Wall -Wextra -Werror

$(NAME): $(OBJFILES)
	$(CC) $(LDFLAGS) -o $@ $^

obj/%.o: src/%.c $(HEADERFILES)
	@mkdir -p $(dir $@)
	$(CC) -c $(CFLAGS) -o $@ $<

We made three changes.
First we added a HEADERFILES variable which contains a list of header files,
then we added it as a prerequisite to the obj/%.o rule,
and finally, we changed the second $^ to a $<.

Our obj/%.o rule now has multiple prerequisites:
The corrosponding src/%.c file and all header files defined in HEADERFILES.
Because make checks if any prequisite is newer than the target,
the target will be recompiled whenever a header file updates.
 This same check will be executed for every object file rule,
causing all of them to be recompiled.

The $^ and $< automatic variables are different in a subtile but important way:
"$^" resolves to all of the prerequisites,
while "$<" just resolves to the first one.
In our case, that means that "$<" ignores the header files and just expands to our source file.
This is exactly what we want
since the our compiler shouldn’t be told what the header files are directly.